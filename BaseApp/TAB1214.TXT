OBJECT Table 1214 Intermediate Data Import
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;AutoIncrement=Yes }
    { 2   ;   ;Data Exch. No.      ;Integer       ;TableRelation="Data Exch.";
                                                   NotBlank=Yes }
    { 3   ;   ;Table ID            ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Table));
                                                   NotBlank=Yes }
    { 4   ;   ;Record No.          ;Integer        }
    { 5   ;   ;Field ID            ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID)) }
    { 6   ;   ;Value               ;Text250        }
    { 7   ;   ;Validate Only       ;Boolean        }
    { 8   ;   ;Parent Record No.   ;Integer        }
    { 16  ;   ;Value BLOB          ;BLOB           }
  }
  KEYS
  {
    {    ;ID                                       }
    {    ;Data Exch. No.,Table ID,Record No.,Field ID;
                                                   Clustered=Yes }
    {    ;Data Exch. No.,Table ID,Field ID         }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE InsertOrUpdateEntry@2(EntryNo@1002 : Integer;TableID@1003 : Integer;FieldID@1004 : Integer;ParentRecordNo@1001 : Integer;RecordNo@1000 : Integer;NewValue@1005 : Text[250]);
    BEGIN
      IF FindEntry(EntryNo,TableID,FieldID,ParentRecordNo,RecordNo) THEN
        SetValue(NewValue)
      ELSE BEGIN
        CLEAR(Rec);
        "Data Exch. No." := EntryNo;
        "Table ID" := TableID;
        "Record No." := RecordNo;
        "Field ID" := FieldID;
        SetValueWithoutModifying(NewValue);
        "Parent Record No." := ParentRecordNo;
        "Validate Only" := FALSE;
        INSERT;
      END;
    END;

    [External]
    PROCEDURE FindEntry@1(EntryNo@1002 : Integer;TableID@1003 : Integer;FieldID@1004 : Integer;ParentRecordNo@1001 : Integer;RecordNo@1000 : Integer) : Boolean;
    BEGIN
      RESET;

      SETRANGE("Data Exch. No.",EntryNo);
      SETRANGE("Table ID",TableID);
      SETRANGE("Field ID",FieldID);
      SETRANGE("Parent Record No.",ParentRecordNo);
      SETRANGE("Record No.",RecordNo);

      EXIT(FINDFIRST);
    END;

    [External]
    PROCEDURE GetEntryValue@4(EntryNo@1002 : Integer;TableID@1003 : Integer;FieldID@1004 : Integer;ParentRecordNo@1001 : Integer;RecordNo@1000 : Integer) : Text[250];
    BEGIN
      IF FindEntry(EntryNo,TableID,FieldID,ParentRecordNo,RecordNo) THEN
        EXIT(GetValue);

      EXIT('');
    END;

    PROCEDURE GetValue@16() : Text;
    VAR
      TempBlob@1000 : Record 99008535;
      CR@1001 : Text[1];
    BEGIN
      IF NOT "Value BLOB".HASVALUE THEN
        EXIT(Value);
      CR[1] := 10;
      CALCFIELDS("Value BLOB");
      TempBlob.Blob := "Value BLOB";
      EXIT(TempBlob.ReadAsText(CR,TEXTENCODING::Windows));
    END;

    PROCEDURE SetValue@17(NewValue@1001 : Text);
    BEGIN
      SetValueWithoutModifying(NewValue);
      MODIFY;
    END;

    PROCEDURE SetValueWithoutModifying@12(NewValue@1001 : Text);
    VAR
      TempBlob@1000 : Record 99008535;
    BEGIN
      CLEAR("Value BLOB");
      Value := COPYSTR(NewValue,1,MAXSTRLEN(Value));
      IF STRLEN(NewValue) <= MAXSTRLEN(Value) THEN
        EXIT; // No need to store anything in the blob
      IF NewValue = '' THEN
        EXIT;
      TempBlob.WriteAsText(NewValue,TEXTENCODING::Windows);
      "Value BLOB" := TempBlob.Blob;
    END;

    BEGIN
    END.
  }
}

