OBJECT Codeunit 146007 Test_DotNet_String
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=Test,W1,All;
  }
  PROPERTIES
  {
    Subtype=Test;
    TestPermissions=Disabled;
    OnRun=BEGIN
            // [FEATURE] [DotNet] [UT] [String]
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;

    [Test]
    PROCEDURE TestDotNetStringSplit@1();
    VAR
      DotNet_String@1000 : Codeunit 3007;
      DotNet_ArraySplit@1005 : Codeunit 3000;
      DotNet_ArrayResult@1001 : Codeunit 3000;
      SplitChar@1002 : Char;
      TestValue@1003 : ARRAY [4] OF Text;
    BEGIN
      // [SCENARIO] Split a string

      // [GIVEN] A split char in an array
      SplitChar := 9;
      DotNet_String.Set(FORMAT(SplitChar));
      DotNet_String.ToCharArray(0,1,DotNet_ArraySplit);

      // [GIVEN] Some strings
      TestValue[1] := 'This is the first value';
      TestValue[2] := 'This is the second value';
      TestValue[3] := PADSTR('This is a long value',1000,'A');
      TestValue[3] := PADSTR('This is a longer value',5000,'B');

      DotNet_String.Set(
        TestValue[1] + FORMAT(SplitChar) +
        TestValue[2] + FORMAT(SplitChar) +
        TestValue[3] + FORMAT(SplitChar) +
        TestValue[4] );

      // [WHEN] The Split method is called
      DotNet_String.Split(DotNet_ArraySplit,DotNet_ArrayResult);

      // [THEN] The String is split
      Assert.AreEqual(TestValue[1],DotNet_ArrayResult.GetValueAsText(0),'Incorrect result value from split');
      Assert.AreEqual(TestValue[2],DotNet_ArrayResult.GetValueAsText(1),'Incorrect result value from split');
      Assert.AreEqual(TestValue[3],DotNet_ArrayResult.GetValueAsText(2),'Incorrect result value from split');
      Assert.AreEqual(TestValue[4],DotNet_ArrayResult.GetValueAsText(3),'Incorrect result value from split');
    END;

    [Test]
    PROCEDURE TestDotNetStringEndsWith@2();
    VAR
      DotNet_String@1000 : Codeunit 3007;
    BEGIN
      // [SCENARIO] Verify the end of a string

      // [GIVEN] A default string
      DotNet_String.Set('The quick brown fox jumped over the lazy dog');

      // [THEN] The end should be 'dog'
      Assert.IsTrue(DotNet_String.EndsWith('dog'),'Incorrect result value from EndsWith');
      Assert.IsFalse(DotNet_String.EndsWith('fox'),'Incorrect result value from EndsWith');
    END;

    [Test]
    PROCEDURE TestDotNetStringBeginsWith@3();
    VAR
      DotNet_String@1000 : Codeunit 3007;
    BEGIN
      // [SCENARIO] Verify the start of a string

      // [GIVEN] A default string
      DotNet_String.Set('The quick brown fox jumped over the lazy dog');

      // [THEN] The start should be 'The'
      Assert.IsTrue(DotNet_String.StartsWith('The'),'Incorrect result value from StartsWith');
      Assert.IsFalse(DotNet_String.StartsWith('dog'),'Incorrect result value from StartsWith');
    END;

    [Test]
    PROCEDURE TestStringLengthMethod@4();
    VAR
      DotNet_String@1003 : Codeunit 3007;
    BEGIN
      // [Given] an empty string
      DotNet_String.Set('');
      // [THEN] string length should be 0
      Assert.AreEqual(0,DotNet_String.Length,'String length check failed');
      // [Given] a string 'Test'
      DotNet_String.Set('Test');
      // [THEN] string length should be 4
      Assert.AreEqual(4,DotNet_String.Length,'String length check failed');
    END;

    [Test]
    PROCEDURE TestStringPadMethods@5();
    VAR
      DotNet_String@1003 : Codeunit 3007;
    BEGIN
      // [Given] a string 'T'
      DotNet_String.Set('T');
      // [WHEN] when we pad it right with spaces by 10 characters
      // [THEN] string actual value must be 'T         '
      Assert.AreEqual('T         ',DotNet_String.PadRight(10,' '),'String value check failed');
      // [WHEN] when we pad it right with spaces by 10 characters
      // [THEN] string actual value must be '          T'
      Assert.AreEqual('         T',DotNet_String.PadLeft(10,' '),'String value check failed');
      // [WHEN] when we pad it left and right with spaces by 10 characters
      // [THEN] string actual value must be '          T          '
      DotNet_String.Set(DotNet_String.PadLeft(10,' '));
      DotNet_String.Set(DotNet_String.PadRight(20,' '));
      Assert.AreEqual('         T          ',DotNet_String.ToString,'String value check failed');
    END;

    [Test]
    PROCEDURE TestStringTrimMethods@6();
    VAR
      DotNet_ArrayChar@1003 : Codeunit 3000;
      DotNet_String@1004 : Codeunit 3007;
    BEGIN
      // [Given] a string ' ,T,'
      DotNet_String.Set(' ,T,');
      // [WHEN] when we trim it
      // [THEN] string actual value must be ',T,'
      Assert.AreEqual(',T,',DotNet_String.Trim,'String value check failed');
      DotNet_ArrayChar.CharArray(2);
      DotNet_ArrayChar.SetCharValue(',',0);
      DotNet_ArrayChar.SetCharValue(' ',1);
      // [WHEN] when we trim it from left with trim char ','
      // [THEN] string actual value must be 'T,'
      Assert.AreEqual('T,',DotNet_String.TrimStart(DotNet_ArrayChar),'String value check failed');
      // [WHEN] when we trim it from right with trim char ','
      // [THEN] string actual value must be 'T'
      Assert.AreEqual(' ,T',DotNet_String.TrimEnd(DotNet_ArrayChar),'String value check failed');
    END;

    [Test]
    PROCEDURE TestStringSubstringMethod@7();
    VAR
      DotNet_String@1003 : Codeunit 3007;
    BEGIN
      // [Given] a string 'ABCD'
      DotNet_String.Set('ABCD');
      // [WHEN] when we trim it;
      // [THEN] string actual value must be 'BC'
      Assert.AreEqual('BC',DotNet_String.Substring(1,2),'String value check failed');
    END;

    [Test]
    PROCEDURE TestStringIndexOfMethods@8();
    VAR
      DotNet_String@1003 : Codeunit 3007;
    BEGIN
      // [Given] a string 'ABCDBC'
      DotNet_String.Set('ABCDBC');
      // [THEN] first index of char 'B' must be 1
      Assert.AreEqual(1,DotNet_String.IndexOfChar('B',0),'Index of check failed');
      // [THEN] second index of char 'B' must be 4
      Assert.AreEqual(4,DotNet_String.IndexOfChar('B',2),'Index of check failed');
      // [THEN] first index of string 'BC' must be 1
      Assert.AreEqual(1,DotNet_String.IndexOfString('BC',0),'Index of check failed');
      // [THEN] second index of string 'BC' must be 4
      Assert.AreEqual(4,DotNet_String.IndexOfString('BC',2),'Index of check failed');
    END;

    [Test]
    PROCEDURE TestStringFromCharArrayMethod@9();
    VAR
      DotNet_ArrayChar@1005 : Codeunit 3000;
      DotNet_String@1006 : Codeunit 3007;
    BEGIN
      // [Given] a string 'ABCDBC'
      DotNet_String.Set('ABCDBC');
      // [WHEN] we convert it to char array and convert back
      DotNet_String.ToCharArray(0,DotNet_String.Length,DotNet_ArrayChar);
      CLEAR(DotNet_String);
      DotNet_String.FromCharArray(DotNet_ArrayChar);
      // [THEN] length of string must be 6
      Assert.AreEqual(6,DotNet_String.Length,'String length check failed');
      // [THEN] value of string must be 'ABCDBC'
      Assert.AreEqual('ABCDBC',DotNet_String.ToString,'String value check failed');
    END;

    BEGIN
    END.
  }
}

