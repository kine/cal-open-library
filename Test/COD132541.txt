OBJECT Codeunit 132541 Test Bank Mapping Generic
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=Test,ERM,W1,All;
  }
  PROPERTIES
  {
    Subtype=Test;
    TestPermissions=Disabled;
    OnRun=BEGIN
            // [FEATURE] [Data Exchange] [Mapping]
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1000 : Codeunit 131000;
      LibraryUTUtility@1006 : Codeunit 131008;
      Assert@1001 : Codeunit 130000;
      TableErrorMsg@1002 : TextConst 'ENU=%1 Line:%2';
      AssertMsg@1018 : TextConst 'ENU=%1 Field:"%2" different from expected.';
      MissingValueErr@1003 : TextConst '@@@=N/A;ENU=The file that you are trying to import, %1, is different from the specified %2, %3.\\The value in line %4, column %5 is missing.';
      IncorrectFormatOrTypeErr@1004 : TextConst '@@@=N/A;ENU=The file that you are trying to import, %1, is different from the specified %2, %3.\\The value in line %4, column %5 has incorrect format or type.\Expected format: %6, according to the %7 and %8 of the %9.\Actual value: "%10"';
      ExpectedErrorFailedErr@1005 : TextConst 'ENU=Assert.ExpectedError failed. Expected: %1. Actual: %2.';

    [Test]
    PROCEDURE TestImportMultiRowMultiColumns@1();
    VAR
      Object@1005 : Record 2000000001;
      TempBlob@1001 : Record 99008535;
      DataExch@1004 : Record 1220;
      DataExchField@1000 : Record 1221;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1006 : Record 1227;
      DataExchColumnDef@1009 : Record 1223;
      DataExchMapping@1008 : Record 1224;
      DataExchFieldMapping@1010 : Record 1225;
      TestDataExchDestTable@1011 : Record 132460;
      TempExpectedTestDataExchDestTable@1014 : TEMPORARY Record 132460;
      InStream@1002 : InStream;
      RecRef@1003 : RecordRef;
    BEGIN
      // Setup file definition
      Object.SETRANGE(Type,Object.Type::XMLport);
      Object.FINDFIRST;
      TestDataExchDestTable.DELETEALL;
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",Object.ID,0,'','');
      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchDef.MODIFY(TRUE); // Adds test coverage.
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'SomeTextColumn   ',
        TRUE,DataExchColumnDef."Data Type"::Text,'','','');
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',2,'SomeDateColumn   ',
        TRUE,DataExchColumnDef."Data Type"::Date,'ddMMyyyy','da-DK','');
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',3,'SomeDecimalColumn',
        TRUE,DataExchColumnDef."Data Type"::Decimal,'','en-US','');
      DataExchColumnDef.MODIFY(TRUE);  // Adds test coverage.

      // Setup file mapping
      DataExchMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",'Test Mapping',0,
        TestDataExchDestTable.FIELDNO(ExchNo),TestDataExchDestTable.FIELDNO(LineNo));
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",1,2,FALSE,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",2,3,FALSE,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",3,4,FALSE,1);

      // Generate Input Table
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec('C:\AnyPath\AnyCSVFileName.txt',InStream,DataExchDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,1,'Text1',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,2,'01012013',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,3,'1234',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",2,1,'Text2',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",2,2,'02022013',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",2,3,'5678',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",3,1,'A text that is to long for the destination field',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",3,2,'02022013',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",3,3,'5678',DataExchLineDef.Code);

      // Run Mapping
      CreateTemplate(RecRef,TestDataExchDestTable);
      ProcessDataExchColumnMapping(DataExch,RecRef);

      // Verify Table Layout
      TempExpectedTestDataExchDestTable.InsertRec(10000,'Text1',DMY2DATE(1,1,2013),1234,1,'SOMECODE','NONE',DataExch."Entry No.",1);
      TempExpectedTestDataExchDestTable.InsertRec(20000,'Text2',DMY2DATE(2,2,2013),5678,1,'SOMECODE','NONE',DataExch."Entry No.",2);
      TempExpectedTestDataExchDestTable.InsertRec(30000,'A text that is to long for the',DMY2DATE(2,2,2013),5678,1,'SOMECODE','NONE',
        DataExch."Entry No.",3);
      AssertDataInTable(TempExpectedTestDataExchDestTable,TestDataExchDestTable,'');
    END;

    [Test]
    PROCEDURE TestImportMissingColumns@2();
    VAR
      TempBlob@1001 : Record 99008535;
      DataExch@1004 : Record 1220;
      DataExchField@1000 : Record 1221;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1005 : Record 1227;
      DataExchColumnDef@1009 : Record 1223;
      DataExchMapping@1008 : Record 1224;
      DataExchFieldMapping@1010 : Record 1225;
      TestDataExchDestTable@1011 : Record 132460;
      InStream@1002 : InStream;
      RecRef@1003 : RecordRef;
    BEGIN
      // Setup file definition
      TestDataExchDestTable.DELETEALL;
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');
      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'SomeTextColumn   ',
        TRUE,DataExchColumnDef."Data Type"::Text,'','','');
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',2,'SomeDateColumn   ',
        TRUE,DataExchColumnDef."Data Type"::Date,'ddMMyyyy','da-DK','');
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',3,'SomeDecimalColumn',
        TRUE,DataExchColumnDef."Data Type"::Decimal,'','en-US','');

      // Setup file mapping
      DataExchMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",'Test Mapping',0,
        TestDataExchDestTable.FIELDNO(ExchNo),TestDataExchDestTable.FIELDNO(LineNo));
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",1,2,FALSE,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",2,3,FALSE,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",3,4,FALSE,1);

      // Generate Input Table
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec('C:\FileName.txt',InStream,DataExchDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,1,'Text1',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,2,'01012013',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",2,1,'Text2',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",2,2,'02022013',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",2,3,'5678',DataExchLineDef.Code);

      // Exercise
      CreateTemplate(RecRef,TestDataExchDestTable);
      ASSERTERROR ProcessDataExchColumnMapping(DataExch,RecRef);

      // Verify Table Layout
      AssertExpectedError(
        STRSUBSTNO(MissingValueErr,'C:\FileName.txt',DataExchDef.Type::"Bank Statement Import",
          DataExchDef.Code,1,3));
      DataExchField.SETRANGE("Data Exch. No.",DataExch."Entry No.");
      Assert.IsTrue(DataExchField.ISEMPTY,'No line should be imported');
    END;

    [Test]
    PROCEDURE TestMappingMultipleColumnsToOneField@11();
    VAR
      TempBlob@1010 : Record 99008535;
      DataExch@1009 : Record 1220;
      DataExchField@1008 : Record 1221;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1011 : Record 1227;
      DataExchColumnDef@1006 : Record 1223;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1004 : Record 1225;
      TestDataExchDestTable@1003 : Record 132460;
      InStream@1001 : InStream;
      RecRef@1000 : RecordRef;
    BEGIN
      // Setup file definition
      TestDataExchDestTable.DELETEALL;
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');
      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'TextColumn1',TRUE,DataExchColumnDef."Data Type"::Text,'','','');
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',2,'TextColumn2',TRUE,DataExchColumnDef."Data Type"::Text,'','','');

      // Setup file mapping
      DataExchMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",'Test Mapping',0,
        TestDataExchDestTable.FIELDNO(ExchNo),TestDataExchDestTable.FIELDNO(LineNo));
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",1,2,FALSE,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",2,2,FALSE,0);

      // Generate Input Table
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec('C:\AnyPath\AnyCSVFileName.txt',InStream,DataExchDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,1,'ABCDEFGHIJKLMNOPQRSTUVWXYZ',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,2,'abcOverflowChars',DataExchLineDef.Code);

      // Exercise
      CreateTemplate(RecRef,TestDataExchDestTable);
      ProcessDataExchColumnMapping(DataExch,RecRef);

      // Verify
      TestDataExchDestTable.FINDFIRST;
      RecRef.GETTABLE(TestDataExchDestTable);
      Assert.AreEqual('ABCDEFGHIJKLMNOPQRSTUVWXYZ abc',RecRef.FIELD(2).VALUE,'The values were not concatenated as expected');
    END;

    [Test]
    PROCEDURE TestMappingRepeatedColumnToOneField@21();
    VAR
      TempBlob@1010 : Record 99008535;
      DataExch@1009 : Record 1220;
      DataExchField@1008 : Record 1221;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1011 : Record 1227;
      DataExchColumnDef@1006 : Record 1223;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1004 : Record 1225;
      TestDataExchDestTable@1003 : Record 132460;
      InStream@1001 : InStream;
      RecRef@1000 : RecordRef;
    BEGIN
      // Setup file definition
      TestDataExchDestTable.DELETEALL;
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');
      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'TextColumn1',TRUE,DataExchColumnDef."Data Type"::Text,'','','');
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',2,'TextColumn2',TRUE,DataExchColumnDef."Data Type"::Text,'','','');

      // Setup file mapping
      DataExchMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",'Test Mapping',0,
        TestDataExchDestTable.FIELDNO(ExchNo),TestDataExchDestTable.FIELDNO(LineNo));
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",1,2,FALSE,0);

      // Generate Input Table
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec('C:\AnyPath\AnyCSVFileName.txt',InStream,DataExchDef.Code);
      DataExchField.InsertRecXMLField(DataExch."Entry No.",1,1,'1-1','Instance1Line1',DataExchLineDef.Code);
      DataExchField.InsertRecXMLField(DataExch."Entry No.",1,1,'1-2','Instance2Line1',DataExchLineDef.Code);
      DataExchField.InsertRecXMLField(DataExch."Entry No.",1,2,'1-3','AnyText',DataExchLineDef.Code);
      DataExchField.InsertRecXMLField(DataExch."Entry No.",2,1,'2-1','Instance1Line2',DataExchLineDef.Code);

      // Exercise
      CreateTemplate(RecRef,TestDataExchDestTable);
      ProcessDataExchColumnMapping(DataExch,RecRef);

      // Verify
      TestDataExchDestTable.FINDFIRST;
      RecRef.GETTABLE(TestDataExchDestTable);
      Assert.AreEqual('Instance1Line1 Instance2Line1',RecRef.FIELD(2).VALUE,'The values were not concatenated as expected');
      RecRef.NEXT;
      Assert.AreEqual('Instance1Line2',RecRef.FIELD(2).VALUE,'The values were not concatenated as expected');
    END;

    [Test]
    PROCEDURE TestMappingRepeatedColumnToOneFieldTrimTrailingSpaces@32();
    VAR
      TempBlob@1010 : Record 99008535;
      DataExch@1009 : Record 1220;
      DataExchField@1008 : Record 1221;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1011 : Record 1227;
      DataExchColumnDef@1006 : Record 1223;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1004 : Record 1225;
      TestDataExchDestTable@1003 : Record 132460;
      InStream@1001 : InStream;
      RecRef@1000 : RecordRef;
    BEGIN
      // Setup file definition
      TestDataExchDestTable.DELETEALL;
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');
      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'TextColumn1',TRUE,DataExchColumnDef."Data Type"::Text,'','','');
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',2,'TextColumn2',TRUE,DataExchColumnDef."Data Type"::Text,'','','');

      // Setup file mapping
      DataExchMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",'Test Mapping',0,
        TestDataExchDestTable.FIELDNO(ExchNo),TestDataExchDestTable.FIELDNO(LineNo));
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",1,2,FALSE,0);

      // Generate Input Table
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec('C:\AnyPath\AnyCSVFileName.txt',InStream,DataExchDef.Code);
      DataExchField.InsertRecXMLField(DataExch."Entry No.",1,1,'1-1','L1C1Inst1   ',DataExchLineDef.Code);
      DataExchField.InsertRecXMLField(DataExch."Entry No.",1,1,'1-2','L1C1Inst2   ',DataExchLineDef.Code);
      DataExchField.InsertRecXMLField(DataExch."Entry No.",1,2,'1-3','AnyText   ',DataExchLineDef.Code);
      DataExchField.InsertRecXMLField(DataExch."Entry No.",2,1,'2-1','L2C1Inst2   ',DataExchLineDef.Code);

      // Exercise
      CreateTemplate(RecRef,TestDataExchDestTable);
      ProcessDataExchColumnMapping(DataExch,RecRef);

      // Verify
      TestDataExchDestTable.FINDFIRST;
      RecRef.GETTABLE(TestDataExchDestTable);
      Assert.AreEqual('L1C1Inst1 L1C1Inst2',RecRef.FIELD(2).VALUE,'The values were not trimmed as expected');
      RecRef.NEXT;
      Assert.AreEqual('L2C1Inst2',RecRef.FIELD(2).VALUE,'The value was not trimmed as expected.');
    END;

    [Test]
    PROCEDURE TestMappingOptionalField@12();
    VAR
      TempBlob@1010 : Record 99008535;
      DataExch@1009 : Record 1220;
      DataExchField@1008 : Record 1221;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1011 : Record 1227;
      DataExchColumnDef@1006 : Record 1223;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1004 : Record 1225;
      TestDataExchDestTable@1003 : Record 132460;
      InStream@1001 : InStream;
      RecRef@1000 : RecordRef;
    BEGIN
      // Setup file definition
      TestDataExchDestTable.DELETEALL;
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');

      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'SomeTextColumn',
        TRUE,DataExchColumnDef."Data Type"::Text,'','','');
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',2,'SomeDateColumn',
        TRUE,DataExchColumnDef."Data Type"::Date,'ddMMyyyy','da-DK','');
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',3,'SomeDecimalColumn',
        TRUE,DataExchColumnDef."Data Type"::Decimal,'','en-US','');

      // Setup file mapping
      DataExchMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",'Test Mapping',0,
        TestDataExchDestTable.FIELDNO(ExchNo),TestDataExchDestTable.FIELDNO(LineNo));
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",1,2,FALSE,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",2,3,TRUE,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",3,4,FALSE,1);

      // Generate Input Table (skip optional field)
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec('C:\AnyPath\AnyCSVFileName.txt',InStream,DataExchDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,1,'Text1',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,3,'5678',DataExchLineDef.Code);

      // Exercise
      CreateTemplate(RecRef,TestDataExchDestTable);
      ProcessDataExchColumnMapping(DataExch,RecRef);

      // Verify
      TestDataExchDestTable.FINDFIRST;
      RecRef.GETTABLE(TestDataExchDestTable);
      Assert.AreEqual('Text1',RecRef.FIELD(2).VALUE,'');
      Assert.AreEqual('',FORMAT(RecRef.FIELD(3).VALUE),'');
      Assert.AreEqual(5678,RecRef.FIELD(4).VALUE,'');
    END;

    [Test]
    PROCEDURE TestMappingCreditField@17();
    VAR
      TempBlob@1010 : Record 99008535;
      DataExch@1009 : Record 1220;
      DataExchField@1008 : Record 1221;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1011 : Record 1227;
      DataExchColumnDef@1006 : Record 1223;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1004 : Record 1225;
      TestDataExchDestTable@1003 : Record 132460;
      InStream@1001 : InStream;
      RecRef@1000 : RecordRef;
    BEGIN
      // Setup file definition
      TestDataExchDestTable.DELETEALL;
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');

      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'Amount',TRUE,DataExchColumnDef."Data Type"::Decimal,'','en-US','');
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',2,'Credit/Debit',TRUE,DataExchColumnDef."Data Type"::Text,'','','');
      DataExchColumnDef."Negative-Sign Identifier" := 'CRDT';
      DataExchColumnDef.MODIFY(TRUE);

      // Setup file mapping
      DataExchMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",'Test Mapping',0,
        TestDataExchDestTable.FIELDNO(ExchNo),TestDataExchDestTable.FIELDNO(LineNo));
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",1,4,FALSE,1);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",2,4,FALSE,0);

      // Generate Input Table (skip optional field)
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec('C:\AnyPath\AnyCSVFileName.txt',InStream,DataExchDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,1,'123',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,2,'CRDT',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",2,1,'456.70',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",2,2,'DBIT',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",3,1,'0',DataExchLineDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",3,2,'CRDT',DataExchLineDef.Code);

      // Exercise
      CreateTemplate(RecRef,TestDataExchDestTable);
      ProcessDataExchColumnMapping(DataExch,RecRef);

      // Verify
      TestDataExchDestTable.FINDFIRST;
      RecRef.GETTABLE(TestDataExchDestTable);
      Assert.AreEqual(-123,RecRef.FIELD(4).VALUE,'');
      RecRef.NEXT;
      Assert.AreEqual(456.7,RecRef.FIELD(4).VALUE,'');
      RecRef.NEXT;
      Assert.AreEqual(0,RecRef.FIELD(4).VALUE,'');
    END;

    [Test]
    PROCEDURE TestNonIntegerPrimaryKey@22();
    VAR
      TempBlob@1010 : Record 99008535;
      DataExch@1009 : Record 1220;
      DataExchField@1008 : Record 1221;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1011 : Record 1227;
      DataExchColumnDef@1006 : Record 1223;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1004 : Record 1225;
      Customer@1003 : Record 18;
      InStream@1001 : InStream;
      RecRef@1000 : RecordRef;
      CustName@1012 : Text[250];
    BEGIN
      // Setup file definition
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Definition for non-integer key',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');

      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'SomeTextColumn   ',TRUE,DataExchColumnDef."Data Type"::Text,'','','');

      // Setup file mapping
      DataExchMapping.InsertRec(DataExchDef.Code,'',DATABASE::Customer,'Test Mapping',0,0,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::Customer,1,2,FALSE,1);

      // Generate Input Table (skip optional field)
      CustName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec('C:\AnyPath\AnyCSVFileName.txt',InStream,DataExchDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,1,CustName,DataExchLineDef.Code);

      // Exercise
      RecRef.GETTABLE(Customer);
      ProcessDataExchColumnMapping(DataExch,RecRef);

      // Verify
      Customer.SETRANGE(Name,CustName);
      Customer.FINDFIRST;
    END;

    [Test]
    PROCEDURE TestShortTextMapping@3();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Text,'','','A short text',2,0,'A short text');
    END;

    [Test]
    PROCEDURE TestLongTextMapping@4();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMapping(
        1,DataExchColumnDef."Data Type"::Text,'','','A text that is to long for the destination field',2,0,
        'A text that is to long for the');
    END;

    [Test]
    PROCEDURE TestTextMappingWithNonZeroMultiplier@18();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Text,'','','A short text',2,1,'A short text');
    END;

    [Test]
    PROCEDURE TestDateddMMyyyyMapping@5();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Date,'ddMMyyyy','da-DK','10112021',3,0,DMY2DATE(10,11,2021));
    END;

    [Test]
    PROCEDURE TestDateddMMyyWithDashMapping@6();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Date,'dd-MM-yy','da-DK','09-10-23',3,0,DMY2DATE(9,10,2023));
    END;

    [Test]
    PROCEDURE TestDateMMddyyForwardSlashMapping@7();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Date,'MM/dd/yy','en-US','09/10/23',3,0,DMY2DATE(10,9,2023));
    END;

    [Test]
    PROCEDURE TestDateyyyyMMddNoSeparatorMapping@13();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Date,'yyyyMMdd','en-US','20120227',3,0,DMY2DATE(27,2,2012));
    END;

    [Test]
    PROCEDURE TestErrorInTypeNotADate@15();
    VAR
      DataExchColumnDef@1000 : Record 1223;
      ErrorMsg@1001 : Text[1024];
    BEGIN
      ErrorMsg :=
        STRSUBSTNO(IncorrectFormatOrTypeErr,'%1','%2','%3',1,1,'Date',DataExchColumnDef.FIELDCAPTION("Data Format"),
          DataExchColumnDef.FIELDCAPTION("Data Formatting Culture"),DataExchColumnDef.TABLECAPTION,'This is not a date 010101');

      VerifyFieldMappingError(1,DataExchColumnDef."Data Type"::Date,'yyyy-MM-dd','en-US','This is not a date 010101',3,0,ErrorMsg);
    END;

    [Test]
    PROCEDURE TestErrorInWrongFormatedDate@16();
    VAR
      DataExchColumnDef@1000 : Record 1223;
      ErrorMsg@1001 : Text[1024];
    BEGIN
      ErrorMsg :=
        STRSUBSTNO(IncorrectFormatOrTypeErr,'%1','%2','%3',1,1,'Date',DataExchColumnDef.FIELDCAPTION("Data Format"),
          DataExchColumnDef.FIELDCAPTION("Data Formatting Culture"),DataExchColumnDef.TABLECAPTION,'010102');

      VerifyFieldMappingError(1,DataExchColumnDef."Data Type"::Date,'ddMMyyyy','en-US','010102',3,0,ErrorMsg);
    END;

    [Test]
    PROCEDURE TestDecimalDotSeperatorMapping@8();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Decimal,'','en-US','12,345.67',4,1,12345.67);
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Decimal,'','en-US','12345.67',4,1,12345.67);
    END;

    [Test]
    PROCEDURE TestDecimalCommaSeperatorMapping@9();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Decimal,'','da-DK','12.345,67',4,1,12345.67);
    END;

    [Test]
    PROCEDURE TestDecimalWithNonZeroMapping@20();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Decimal,'','en-US','12,345.67',4,-100,-1234567);
      VerifyFieldMapping(1,DataExchColumnDef."Data Type"::Decimal,'','en-US','12345.67',4,0.01,123.4567);
    END;

    [Test]
    PROCEDURE TestErrorInTypeNotDecimal@24();
    VAR
      DataExchColumnDef@1000 : Record 1223;
      ErrorMsg@1001 : Text[1024];
    BEGIN
      ErrorMsg :=
        STRSUBSTNO(IncorrectFormatOrTypeErr,'%1','%2','%3',1,1,'Decimal',DataExchColumnDef.FIELDCAPTION("Data Format"),
          DataExchColumnDef.FIELDCAPTION("Data Formatting Culture"),DataExchColumnDef.TABLECAPTION,'This is not a decimal 123');

      VerifyFieldMappingError(1,DataExchColumnDef."Data Type"::Decimal,'','da-DK','This is not a decimal 123',4,1,ErrorMsg);
    END;

    [Test]
    PROCEDURE TestErrorInWrongDecimalFormat@25();
    VAR
      DataExchColumnDef@1000 : Record 1223;
      ErrorMsg@1001 : Text[1024];
    BEGIN
      ErrorMsg :=
        STRSUBSTNO(IncorrectFormatOrTypeErr,'%1','%2','%3',1,1,'Decimal',DataExchColumnDef.FIELDCAPTION("Data Format"),
          DataExchColumnDef.FIELDCAPTION("Data Formatting Culture"),DataExchColumnDef.TABLECAPTION,'12,345,670');

      VerifyFieldMappingError(1,DataExchColumnDef."Data Type"::Decimal,'','da-DK','12,345,670',4,1,ErrorMsg);
    END;

    [Test]
    PROCEDURE TestErrorNonSupportedType@19();
    VAR
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      VerifyFieldMappingError(1,DataExchColumnDef."Data Type"::Date,'','','Yes',10,0,'Boolean field, which is not supported');
    END;

    [Test]
    PROCEDURE TestIsOnDataLinePositive@23();
    VAR
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1011 : Record 1227;
      DataExchColumnDef@1006 : Record 1223;
    BEGIN
      // Setup file definition
      DataExchDef.InsertRec(
        LibraryUtility.GenerateGUID,'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');

      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchLineDef."Data Line Tag" := LibraryUtility.GenerateGUID;
      DataExchLineDef.MODIFY;

      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'Amount',TRUE,DataExchColumnDef."Data Type"::Decimal,'','en-US','');
      DataExchColumnDef.Path := COPYSTR(DataExchLineDef."Data Line Tag" + DataExchColumnDef.Name,1,MAXSTRLEN(DataExchColumnDef.Path));
      DataExchColumnDef.MODIFY;

      // Verify.
      Assert.IsTrue(DataExchColumnDef.IsOfDataLine,'Column should be on the data line.');
    END;

    [Test]
    PROCEDURE TestIsOnDataLineNegative@29();
    VAR
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1011 : Record 1227;
      DataExchColumnDef@1006 : Record 1223;
    BEGIN
      // Setup file definition
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');

      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchLineDef."Data Line Tag" := LibraryUtility.GenerateGUID;
      DataExchLineDef.MODIFY;

      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'Amount',TRUE,DataExchColumnDef."Data Type"::Decimal,'','en-US','');
      DataExchColumnDef.Path := COPYSTR(DataExchLineDef."Data Line Tag",1,STRLEN(DataExchLineDef."Data Line Tag") - 1);
      DataExchColumnDef.MODIFY;

      // Verify.
      Assert.IsFalse(DataExchColumnDef.IsOfDataLine,'Column should not be on the data line.');
    END;

    [Test]
    PROCEDURE TestIsOnDataLineFlatFile@26();
    VAR
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1011 : Record 1227;
      DataExchColumnDef@1006 : Record 1223;
    BEGIN
      // Setup file definition
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');
      DataExchDef."File Type" := DataExchDef."File Type"::"Fixed Text";
      DataExchDef.MODIFY;
      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'Amount',TRUE,DataExchColumnDef."Data Type"::Decimal,'','en-US','');
      DataExchColumnDef.Path := LibraryUtility.GenerateGUID;
      DataExchColumnDef.MODIFY;

      // Verify.
      Assert.IsTrue(DataExchColumnDef.IsOfDataLine,'Column should be on the data line.');
    END;

    [Test]
    PROCEDURE TestIsOnEmptyDataLine@28();
    VAR
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1011 : Record 1227;
      DataExchColumnDef@1006 : Record 1223;
    BEGIN
      // Setup file definition
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'Just a Test Mapping',
        DataExchDef.Type::"Bank Statement Import",0,0,'','');
      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',1,'Amount',TRUE,DataExchColumnDef."Data Type"::Decimal,'','en-US','');
      DataExchColumnDef.Path := LibraryUtility.GenerateGUID;
      DataExchColumnDef.MODIFY;

      // Verify.
      Assert.IsTrue(DataExchColumnDef.IsOfDataLine,'Column should be on the data line.');
    END;

    [Test]
    PROCEDURE FieldMappingForOption@35();
    VAR
      Object@1009 : Record 2000000001;
      TempBlob@1011 : Record 99008535;
      DataExch@1010 : Record 1220;
      CurrencyExchangeRate@1002 : Record 330;
      DataExchDef@1006 : Record 1222;
      DataExchLineDef@1008 : Record 1227;
      DataExchColumnDef@1007 : Record 1223;
      DummyDataExchFieldMapping@1003 : Record 1225;
      DataExchField@1004 : Record 1221;
      Integer@1005 : Record 2000000026;
      ProcessDataExch@1001 : Codeunit 1201;
      RecRef@1000 : RecordRef;
      FieldRef@1013 : FieldRef;
      InStream@1012 : InStream;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 379670] Field mapping should work for fields with Option type

      Object.SETRANGE(Type,Object.Type::XMLport);
      Object.FINDFIRST;
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),LibraryUTUtility.GetNewCode10,
        DataExchDef.Type::"Generic Import",Object.ID,0,'','');
      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(
        DataExchDef.Code,DataExchLineDef.Code,1,LibraryUTUtility.GetNewCode10,TRUE,DataExchColumnDef."Data Type"::Text,'','','');

      RecRef.GETTABLE(CurrencyExchangeRate);

      DummyDataExchFieldMapping."Data Exch. Def Code" := DataExchDef.Code;
      DummyDataExchFieldMapping."Data Exch. Line Def Code" := DataExchLineDef.Code;
      DummyDataExchFieldMapping."Field ID" := CurrencyExchangeRate.FIELDNO("Fix Exchange Rate Amount");

      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec(LibraryUTUtility.GetNewCode10,InStream,DataExchDef.Code);
      DataExchField.InsertRec(
        DataExch."Entry No.",1,1,FORMAT(CurrencyExchangeRate."Fix Exchange Rate Amount"::Both),DataExchLineDef.Code);

      ProcessDataExch.SetField(RecRef,DummyDataExchFieldMapping,DataExchField,Integer);
      FieldRef := RecRef.FIELD(CurrencyExchangeRate.FIELDNO("Fix Exchange Rate Amount"));
      FieldRef.TESTFIELD(FORMAT(CurrencyExchangeRate."Fix Exchange Rate Amount"::Both));
    END;

    LOCAL PROCEDURE VerifyFieldMapping@50(ColumnNo@1025 : Integer;DataType@1014 : Option;DataFormat@1026 : Text[30];DataFormattingCulture@1005 : Text[10];InputText@1015 : Text[250];FieldNo@1016 : Integer;Multiplier@1013 : Decimal;ExpectedValue@1017 : Variant);
    VAR
      TempBlob@1001 : Record 99008535;
      DataExch@1004 : Record 1220;
      DataExchField@1000 : Record 1221;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1006 : Record 1227;
      DataExchColumnDef@1009 : Record 1223;
      DataExchMapping@1008 : Record 1224;
      DataExchFieldMapping@1010 : Record 1225;
      TestDataExchDestTable@1011 : Record 132460;
      InStream@1002 : InStream;
      RecRef@1003 : RecordRef;
    BEGIN
      // Setup file definition
      TestDataExchDestTable.DELETEALL;
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'',DataExchDef.Type::"Bank Statement Import",0,0,'','');
      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',ColumnNo,'SomeColumn',TRUE,DataType,DataFormat,DataFormattingCulture,'');

      // Setup file mapping
      DataExchMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",'',0,
        TestDataExchDestTable.FIELDNO(ExchNo),TestDataExchDestTable.FIELDNO(LineNo));
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",ColumnNo,FieldNo,FALSE,Multiplier);

      // Generate input Table
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec('',InStream,DataExchDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,ColumnNo,InputText,DataExchLineDef.Code);

      // Execise
      CreateTemplate(RecRef,TestDataExchDestTable);
      ProcessDataExchColumnMapping(DataExch,RecRef);

      // Verify
      TestDataExchDestTable.FINDFIRST;
      RecRef.GETTABLE(TestDataExchDestTable);
      Assert.AreEqual(ExpectedValue,RecRef.FIELD(FieldNo).VALUE,'');
    END;

    LOCAL PROCEDURE VerifyFieldMappingError@14(ColumnNo@1025 : Integer;DataType@1014 : Option;DataFormat@1026 : Text[30];DataFormattingCulture@1005 : Text[10];InputText@1015 : Text[250];FieldNo@1016 : Integer;Multiplier@1013 : Decimal;ExpectedError@1017 : Text[1024]);
    VAR
      TempBlob@1001 : Record 99008535;
      DataExch@1004 : Record 1220;
      DataExchField@1000 : Record 1221;
      DataExchDef@1007 : Record 1222;
      DataExchLineDef@1006 : Record 1227;
      DataExchColumnDef@1009 : Record 1223;
      DataExchMapping@1008 : Record 1224;
      DataExchFieldMapping@1010 : Record 1225;
      TestDataExchDestTable@1011 : Record 132460;
      InStream@1002 : InStream;
      RecRef@1003 : RecordRef;
    BEGIN
      // Setup file definition
      TestDataExchDestTable.DELETEALL;
      DataExchDef.InsertRec(
        LibraryUtility.GenerateRandomCode(1,DATABASE::"Data Exch. Def"),'',DataExchDef.Type::"Bank Statement Import",0,0,'','');
      DataExchLineDef.InsertRec(DataExchDef.Code,'','',0);
      DataExchColumnDef.InsertRec(DataExchDef.Code,'',ColumnNo,'SomeColumn',TRUE,DataType,DataFormat,DataFormattingCulture,'');

      // Setup file mapping
      DataExchMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",'',0,
        TestDataExchDestTable.FIELDNO(ExchNo),TestDataExchDestTable.FIELDNO(LineNo));
      DataExchFieldMapping.InsertRec(DataExchDef.Code,'',DATABASE::"Test Data Exch. Dest Table",ColumnNo,FieldNo,FALSE,Multiplier);

      // Generate input Table
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataExch.InsertRec('',InStream,DataExchDef.Code);
      DataExchField.InsertRec(DataExch."Entry No.",1,ColumnNo,InputText,DataExchLineDef.Code);

      // Execise
      CreateTemplate(RecRef,TestDataExchDestTable);
      ASSERTERROR ProcessDataExchColumnMapping(DataExch,RecRef);

      // Verify
      AssertExpectedError(STRSUBSTNO(ExpectedError,'',DataExchDef.Type::"Bank Statement Import",DataExchDef.Code));
      DataExchField.SETRANGE("Data Exch. No.",DataExch."Entry No.");
      Assert.IsTrue(DataExchField.ISEMPTY,'No line should be imported');
    END;

    LOCAL PROCEDURE CreateTemplate@10(VAR RecRef@1000 : RecordRef;VAR TestDataExchDestTable@1002 : Record 132460);
    BEGIN
      TestDataExchDestTable.INIT;
      TestDataExchDestTable.KeyH1 := 1;
      TestDataExchDestTable.KeyH2 := 'SomeCode';
      TestDataExchDestTable.NonKey := 'None';
      RecRef.GETTABLE(TestDataExchDestTable);
    END;

    LOCAL PROCEDURE AssertDataInTable@51(VAR ExpectedTestDataExchDestTable@1000 : Record 132460;VAR ActualTestDataExchDestTable@1001 : Record 132460;Msg@1007 : Text);
    VAR
      LineNo@1009 : Integer;
    BEGIN
      ExpectedTestDataExchDestTable.FINDFIRST;
      ActualTestDataExchDestTable.FINDFIRST;
      REPEAT
        LineNo += 1;
        AreEqualRecords(ExpectedTestDataExchDestTable,ActualTestDataExchDestTable,STRSUBSTNO(TableErrorMsg,Msg,LineNo));
      UNTIL (ExpectedTestDataExchDestTable.NEXT = 0) OR (ActualTestDataExchDestTable.NEXT = 0);
      Assert.AreEqual(ExpectedTestDataExchDestTable.COUNT,ActualTestDataExchDestTable.COUNT,'Row count does not match');
    END;

    LOCAL PROCEDURE AreEqualRecords@30(ExpectedRecord@1000 : Variant;ActualRecord@1001 : Variant;Msg@1007 : Text);
    VAR
      ExpectedRecRef@1003 : RecordRef;
      ActualRecRef@1002 : RecordRef;
      i@1006 : Integer;
    BEGIN
      ExpectedRecRef.GETTABLE(ExpectedRecord);
      ActualRecRef.GETTABLE(ActualRecord);

      Assert.AreEqual(ExpectedRecRef.NUMBER,ActualRecRef.NUMBER,'Tables are not the same');

      FOR i := 1 TO ExpectedRecRef.FIELDCOUNT DO
        IF IsSupportedType(ExpectedRecRef.FIELDINDEX(i).VALUE) THEN
          Assert.AreEqual(ExpectedRecRef.FIELDINDEX(i).VALUE,ActualRecRef.FIELDINDEX(i).VALUE,
            STRSUBSTNO(AssertMsg,Msg,ExpectedRecRef.FIELDINDEX(i).NAME));
    END;

    LOCAL PROCEDURE IsSupportedType@31(Value@1000 : Variant) : Boolean;
    BEGIN
      EXIT(Value.ISBOOLEAN OR
        Value.ISOPTION OR
        Value.ISINTEGER OR
        Value.ISDECIMAL OR
        Value.ISTEXT OR
        Value.ISCODE OR
        Value.ISDATE OR
        Value.ISTIME);
    END;

    LOCAL PROCEDURE AssertExpectedError@27(Expected@1000 : Text[1024]);
    VAR
    BEGIN
      IF STRPOS(GETLASTERRORTEXT,Expected) = 0 THEN
        ERROR(ExpectedErrorFailedErr,Expected,GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE ProcessDataExchColumnMapping@33(DataExch@1000 : Record 1220;RecRef@1001 : RecordRef);
    VAR
      DataExchLineDef@1002 : Record 1227;
      ProcessDataExch@1003 : Codeunit 1201;
    BEGIN
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExch."Data Exch. Def Code");
      DataExchLineDef.FINDFIRST;
      ProcessDataExch.ProcessColumnMapping(DataExch,DataExchLineDef,RecRef);
    END;

    BEGIN
    END.
  }
}

