OBJECT Codeunit 146032 Test_DotNet_BinaryReaderWriter
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryLowerPermissions@1001 : Codeunit 132217;
      DotNet_BinaryReader@1002 : Codeunit 3032;
      DotNet_BinaryWriter@1003 : Codeunit 3033;
      DotNet_SeekOrigin@1011 : Codeunit 3039;
      DotNet_Stream@1004 : Codeunit 3034;
      DotNet_MemoryStream@1005 : Codeunit 3009;
      DotNet_Encoding@1006 : Codeunit 3026;
      Byte_DotNet_Array@1007 : Codeunit 3000;
      ExpectedByte_DotNet_Array@1008 : Codeunit 3000;
      Char_DotNet_Array@1009 : Codeunit 3000;
      ExpectedChar_DotNet_Array@1010 : Codeunit 3000;

    [Test]
    PROCEDURE TestWritingDifferentDataTypes@1();
    VAR
      ExpectedChar@1002 : Char;
      ExpectedDec@1004 : Decimal;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      DotNet_Encoding.UTF32;
      DotNet_SeekOrigin.SeekBegin;

      CreateStream;
      DotNet_BinaryWriter.BinaryWriterWithEncoding(DotNet_Stream,DotNet_Encoding);
      DotNet_BinaryWriter.WriteChar('A');
      DotNet_BinaryWriter.WriteChar('B');
      DotNet_BinaryWriter.WriteByte(1);
      DotNet_BinaryWriter.WriteInt16(2);
      DotNet_BinaryWriter.WriteInt32(3);
      DotNet_BinaryWriter.WriteUInt16(4);
      DotNet_BinaryWriter.WriteUInt32(5);
      DotNet_BinaryWriter.WriteBoolean(TRUE);
      DotNet_BinaryWriter.WriteDecimal(6);
      DotNet_BinaryWriter.WriteString('CDE');

      DotNet_BinaryWriter.Flush;

      DotNet_Stream.Seek(0,DotNet_SeekOrigin);
      DotNet_BinaryReader.BinaryReaderWithEncoding(DotNet_Stream,DotNet_Encoding);
      ExpectedChar := 'A';
      Assert.AreEqual(ExpectedChar,DotNet_BinaryReader.ReadChar,'ReadChar check failed');
      ExpectedChar := 'B';
      Assert.AreEqual(ExpectedChar,DotNet_BinaryReader.ReadChar,'ReadChar check failed');
      Assert.AreEqual(1,DotNet_BinaryReader.ReadByte,'ReadByte check failed');
      Assert.AreEqual(2,DotNet_BinaryReader.ReadInt16,'ReadInt16 check failed');
      Assert.AreEqual(3,DotNet_BinaryReader.ReadInt32,'ReadInt32 check failed');
      Assert.AreEqual(4,DotNet_BinaryReader.ReadUInt16,'ReadUInt16 check failed');
      Assert.AreEqual(5,DotNet_BinaryReader.ReadUInt32,'ReadUInt32 check failed');
      Assert.AreEqual(TRUE,DotNet_BinaryReader.ReadBoolean,'ReadBoolean check failed');
      ExpectedDec := 6;
      Assert.AreEqual(ExpectedDec,DotNet_BinaryReader.ReadDecimal,'ReadDecimal check failed');
      Assert.AreEqual('CDE',DotNet_BinaryReader.ReadString,'ReadString check failed');
      CLEAR(Byte_DotNet_Array);
      DotNet_BinaryReader.ReadBytes(4,Byte_DotNet_Array);
      CheckArrayItems(Byte_DotNet_Array,ExpectedByte_DotNet_Array);
      CLEAR(Char_DotNet_Array);
      DotNet_BinaryReader.ReadChars(4,Char_DotNet_Array);
      CheckArrayItems(Char_DotNet_Array,ExpectedChar_DotNet_Array);

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteBool@2();
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      DotNet_SeekOrigin.SeekBegin;

      // Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteBoolTest
      DotNet_MemoryStream.InitMemoryStream;
      DotNet_MemoryStream.GetDotNetStream(DotNet_Stream);
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      DotNet_BinaryWriter.WriteBoolean(FALSE);
      DotNet_BinaryWriter.WriteBoolean(FALSE);
      DotNet_BinaryWriter.WriteBoolean(TRUE);
      DotNet_BinaryWriter.WriteBoolean(FALSE);
      DotNet_BinaryWriter.WriteBoolean(TRUE);
      DotNet_BinaryWriter.WriteInt32(5);
      DotNet_BinaryWriter.WriteInt32(0);

      DotNet_BinaryWriter.Flush;
      DotNet_Stream.Seek(0,DotNet_SeekOrigin);

      Assert.AreEqual(FALSE,DotNet_BinaryReader.ReadBoolean,'Read check failed'); // false
      Assert.AreEqual(FALSE,DotNet_BinaryReader.ReadBoolean,'Read check failed'); // false
      Assert.AreEqual(TRUE,DotNet_BinaryReader.ReadBoolean,'Read check failed');  // true
      Assert.AreEqual(FALSE,DotNet_BinaryReader.ReadBoolean,'Read check failed'); // false
      Assert.AreEqual(TRUE,DotNet_BinaryReader.ReadBoolean,'Read check failed');  // true
      Assert.AreEqual(5,DotNet_BinaryReader.ReadInt32,'Read check failed');  // 5
      Assert.AreEqual(0,DotNet_BinaryReader.ReadInt32,'Read check failed'); // 0
      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteDecimal@3();
    VAR
      DecimalArray@1000 : ARRAY [13] OF Decimal;
      Index@1001 : Integer;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      DotNet_SeekOrigin.SeekBegin;

      // Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteDecimalTest
      DecimalArray[1] := 1;
      DecimalArray[2] := 0;
      DecimalArray[3] := -1;
      DecimalArray[4] := -999999999999999.99;
      DecimalArray[5] := 999999999999999.99;
      DecimalArray[6] := -1000.5;
      DecimalArray[7] := POWER(-10.0,-40);
      DecimalArray[8] := POWER(3.4,-40898);
      DecimalArray[9] := POWER(3.4,-28);
      DecimalArray[10] := POWER(3.4,28);
      DecimalArray[11] := 0.45;
      DecimalArray[12] := 5.55;
      DecimalArray[13] := POWER(3.4899,23);

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(DecimalArray) DO
        DotNet_BinaryWriter.WriteDecimal(DecimalArray[Index]);

      DotNet_BinaryWriter.Flush;
      DotNet_Stream.Seek(0,DotNet_SeekOrigin);

      FOR Index := 1 TO ARRAYLEN(DecimalArray) DO
        Assert.AreEqual(DecimalArray[Index],DotNet_BinaryReader.ReadDecimal,'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteInt16@4();
    VAR
      Int16Array@1000 : ARRAY [7] OF Integer;
      Index@1001 : Integer;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      DotNet_SeekOrigin.SeekBegin;

      // Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteInt16Test
      Int16Array[1] := -32768;
      Int16Array[2] := 32767;
      Int16Array[3] := 0;
      Int16Array[4] := -10000;
      Int16Array[5] := 10000;
      Int16Array[6] := -50;
      Int16Array[7] := 50;

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(Int16Array) DO
        DotNet_BinaryWriter.WriteInt16(Int16Array[Index]);

      DotNet_BinaryWriter.Flush;
      DotNet_Stream.Seek(0,DotNet_SeekOrigin);

      FOR Index := 1 TO ARRAYLEN(Int16Array) DO
        Assert.AreEqual(Int16Array[Index],DotNet_BinaryReader.ReadInt16,'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteInt32@5();
    VAR
      Int32Array@1000 : ARRAY [7] OF Integer;
      Index@1001 : Integer;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      DotNet_SeekOrigin.SeekBegin;

      // Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteInt32Test
      Int32Array[1] := -2147483647;
      Int32Array[1] := Int32Array[1] - 1;
      Int32Array[2] := 2147483647;
      Int32Array[3] := 0;
      Int32Array[4] := -10000;
      Int32Array[5] := 10000;
      Int32Array[6] := -50;
      Int32Array[7] := 50;

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(Int32Array) DO
        DotNet_BinaryWriter.WriteInt32(Int32Array[Index]);

      DotNet_BinaryWriter.Flush;
      DotNet_Stream.Seek(0,DotNet_SeekOrigin);

      FOR Index := 1 TO ARRAYLEN(Int32Array) DO
        Assert.AreEqual(Int32Array[Index],DotNet_BinaryReader.ReadInt32,'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteUInt16@6();
    VAR
      Unsignedint16Array@1000 : ARRAY [7] OF Integer;
      Index@1001 : Integer;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      DotNet_SeekOrigin.SeekBegin;

      // Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteUInt16Test
      Unsignedint16Array[1] := 0;
      Unsignedint16Array[2] := 65535;
      Unsignedint16Array[3] := 0;
      Unsignedint16Array[4] := 100;
      Unsignedint16Array[5] := 1000;
      Unsignedint16Array[6] := 10000;
      Unsignedint16Array[7] := 65535 - 100;

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(Unsignedint16Array) DO
        DotNet_BinaryWriter.WriteUInt16(Unsignedint16Array[Index]);

      DotNet_BinaryWriter.Flush;
      DotNet_Stream.Seek(0,DotNet_SeekOrigin);

      FOR Index := 1 TO ARRAYLEN(Unsignedint16Array) DO
        Assert.AreEqual(Unsignedint16Array[Index],DotNet_BinaryReader.ReadUInt16,'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteUInt32@7();
    VAR
      Unsignedint32Array@1000 : ARRAY [7] OF Integer;
      Index@1001 : Integer;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      DotNet_SeekOrigin.SeekBegin;

      // Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteUInt32Test
      Unsignedint32Array[1] := 0;
      Unsignedint32Array[2] := 2147483647;
      Unsignedint32Array[3] := 0;
      Unsignedint32Array[4] := 100;
      Unsignedint32Array[5] := 1000;
      Unsignedint32Array[6] := 10000;
      Unsignedint32Array[7] := 2147483647 - 100;

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(Unsignedint32Array) DO
        DotNet_BinaryWriter.WriteUInt32(Unsignedint32Array[Index]);

      DotNet_BinaryWriter.Flush;
      DotNet_Stream.Seek(0,DotNet_SeekOrigin);

      FOR Index := 1 TO ARRAYLEN(Unsignedint32Array) DO
        Assert.AreEqual(Unsignedint32Array[Index],DotNet_BinaryReader.ReadUInt32,'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    [Test]
    PROCEDURE TestWriteString@8();
    VAR
      DotNet_StringBuilder@1003 : Codeunit 3014;
      StringArray@1000 : ARRAY [10] OF Text;
      Index@1001 : Integer;
      String@1002 : Text;
      TempChar@1005 : Char;
    BEGIN
      LibraryLowerPermissions.SetO365Basic;
      DotNet_SeekOrigin.SeekBegin;

      // Based on https://github.com/dotnet/corefx/ BinaryWriter.WriteTests.cs BinaryWriter_WriteStringTest
      DotNet_StringBuilder.InitStringBuilder('');
      FOR Index := 1 TO 5 DO
        DotNet_StringBuilder.Append('abc');
      String := DotNet_StringBuilder.ToString;

      StringArray[1] := 'ABC';
      TempChar := 9;
      StringArray[2] := '';
      StringArray[2] += FORMAT(TempChar);
      StringArray[2] += FORMAT(TempChar);
      TempChar := 10;
      StringArray[2] += FORMAT(TempChar);
      StringArray[2] += FORMAT(TempChar);
      StringArray[2] += FORMAT(TempChar);
      TempChar := 0;
      StringArray[2] += FORMAT(TempChar);
      TempChar := 13;
      StringArray[2] += FORMAT(TempChar);
      StringArray[2] += FORMAT(TempChar);
      TempChar := 11;
      StringArray[2] += FORMAT(TempChar);
      StringArray[2] += FORMAT(TempChar);
      TempChar := 9;
      StringArray[2] += FORMAT(TempChar);
      TempChar := 0;
      StringArray[2] += FORMAT(TempChar);
      TempChar := 13;
      StringArray[2] += FORMAT(TempChar);
      StringArray[2] += 'Hello';
      StringArray[3] := 'This is a normal string';
      StringArray[4] := '12345667789!@#$%^&&())_+_)@#';
      StringArray[5] := 'ABSDAFJPIRUETROPEWTGRUOGHJDOLJHLDHWEROTYIETYWsdifhsiudyoweurscnkjhdfusiyugjlskdjfoiwueriye';
      StringArray[6] := '     ';
      StringArray[7] := '';
      TempChar := 0;
      StringArray[7] += FORMAT(TempChar);
      StringArray[7] += FORMAT(TempChar);
      StringArray[7] += FORMAT(TempChar);
      TempChar := 9;
      StringArray[7] += FORMAT(TempChar);
      StringArray[7] += FORMAT(TempChar);
      StringArray[7] += FORMAT(TempChar);
      StringArray[7] += 'Hey""';
      StringArray[8] := '';
      TempChar := 37;
      StringArray[8] += FORMAT(TempChar);
      TempChar := 17;
      StringArray[8] += FORMAT(TempChar);
      StringArray[9] := String;
      StringArray[10] := '';

      CreateStream;
      DotNet_BinaryWriter.BinaryWriter(DotNet_Stream);
      DotNet_BinaryReader.BinaryReader(DotNet_Stream);
      FOR Index := 1 TO ARRAYLEN(StringArray) DO
        DotNet_BinaryWriter.WriteString(StringArray[Index]);

      DotNet_BinaryWriter.Flush;
      DotNet_Stream.Seek(0,DotNet_SeekOrigin);

      FOR Index := 1 TO ARRAYLEN(StringArray) DO
        Assert.AreEqual(StringArray[Index],DotNet_BinaryReader.ReadString,'Read check failed');

      DotNet_BinaryReader.Close;
      DotNet_BinaryWriter.Close;
      DotNet_BinaryReader.Dispose;
      DotNet_BinaryWriter.Dispose;
    END;

    LOCAL PROCEDURE CreateStream@100();
    VAR
      DotNetStream@1000 : DotNet "'mscorlib'.System.IO.Stream";
    BEGIN
      DotNet_MemoryStream.InitMemoryStream;
      DotNet_MemoryStream.GetMemoryStream(DotNetStream);
      DotNet_Stream.SetStream(DotNetStream);
    END;

    LOCAL PROCEDURE CheckArrayItems@103(VAR Actual_DotNet_Array@1000 : Codeunit 3000;VAR Expected_DotNet_Array@1001 : Codeunit 3000);
    VAR
      DotNetActualArray@1002 : DotNet "'mscorlib'.System.Array";
      DotNetExpectedArray@1003 : DotNet "'mscorlib'.System.Array";
      Index@1004 : Integer;
    BEGIN
      Actual_DotNet_Array.GetArray(DotNetActualArray);
      Expected_DotNet_Array.GetArray(DotNetExpectedArray);
      FOR Index := 0 TO DotNetActualArray.Length - 1 DO
        Assert.AreEqual(DotNetExpectedArray.GetValue(Index),DotNetActualArray.GetValue(Index),'Array item check failed');
    END;

    BEGIN
    END.
  }
}

